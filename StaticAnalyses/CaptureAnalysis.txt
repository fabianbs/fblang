Context-insensitive, flow-sensitive monotone capture-analysis:

This analysis will be used for determining, which variables (locals, params, fields)
are stored by a function.

Since it is context-insensitive, it is great for deducing function-/parameter attributes.
Hence an analysis-query will return a summary for the given function/method.

This Summary consists of:
    - A set of captured locals/params
    - Thisptr captured
    - optional: param-to-return flow
    
So an analysis basically computes the summary of the queried function.
It does so by using a mono-analysis, which is like a taint-analysis, so I 
will map the analysis specification to a taint analysis to make things easier.

Definition: With the term 'variable' in the following we mean local-variables and 
            function-parameters.
Definition: With the term 'variable-value' we mean a variable or an identity-function
            applied to a variable-value.
            For the latter we will need the optional param-to-return flow in the summaries.

Dataflow-domain: 
    - variables
Source:
    - parameter-values
    - local-variables declarations
      
Sink: 
    - Assignment-statement where the LHS is not a local variable-value and RHS is a tainted variable-value
    - Call to functions, which capture their parameters (when known, which ones, the analysis can be more precise)

Normal flow: 
    - Assignment-statement, where the LHS is a variable-value and the RHS is a tainted variable-value
    - function param-to-return flow
    
Note : assignments include deconstruction statements
Note2: calls include new-expressions (constructor calls)
Note3: The dataflow-domain contains a special Variable.This value for instance-methods,
       which is treated as local variable.
Note4: This analysis can be changed easily to a reference-capture analysis,
       which keeps track of stack-pointers. This can be done, just by giving more 
       constraints to the flow-functions/dataflow-domain

    